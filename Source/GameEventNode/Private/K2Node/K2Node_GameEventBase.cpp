#include "K2Node/K2Node_GameEventBase.h"

#include "BlueprintActionDatabaseRegistrar.h"
#include "BlueprintNodeSpawner.h"
#include "GameEventNodeUtils.h"
#include "EdGraph/EdGraphPin.h"
#include "GameplayTagContainer.h"
#include "GameEventNodeTypes.h"
#include "K2Node_CallFunction.h"
#include "KismetCompiler.h"

#define LOCTEXT_NAMESPACE "UK2Node_GameEventBase"

const FName UK2Node_GameEventBase::FGameEventBasePinNames::EventIdTypePinName(TEXT("EventIdType"));
const FName UK2Node_GameEventBase::FGameEventBasePinNames::EventTagPinName(TEXT("EventTag"));
const FName UK2Node_GameEventBase::FGameEventBasePinNames::EventStringPinName(TEXT("EventName"));

UK2Node_GameEventBase::UK2Node_GameEventBase()
{
}

void UK2Node_GameEventBase::PinDefaultValueChanged(UEdGraphPin* Pin)
{
	GAME_SCOPED_TRACK_LOG_AUTO_BLUEPRINT_NAME()

	Super::PinDefaultValueChanged(Pin);

	if (Pin && CheckUpdatePinCondition(Pin))
	{
		UpdatePinVisibility();
	}
}

FText UK2Node_GameEventBase::GetMenuCategory() const
{
	return NSLOCTEXT("GameEventNode", "GameEventCategory", "GameEventSystem");
}

FText UK2Node_GameEventBase::GetKeywords() const
{
	return NSLOCTEXT("GameEventNode", "GameEventBase_Keywords", "event game system");
}

void UK2Node_GameEventBase::PostReconstructNode()
{
	GAME_SCOPED_TRACK_LOG_AUTO_BLUEPRINT_NAME()

	Super::PostReconstructNode();

	UpdatePinVisibility();
}

void UK2Node_GameEventBase::GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar) const
{
	const UClass* ActionKey = GetClass();

	if (ActionRegistrar.IsOpenForRegistration(ActionKey))
	{
		UBlueprintNodeSpawner* NodeSpawner = UBlueprintNodeSpawner::Create(GetClass());
		check(NodeSpawner != nullptr);

		ActionRegistrar.AddBlueprintAction(ActionKey, NodeSpawner);
	}
}

void UK2Node_GameEventBase::UpdatePinVisibility()
{
	GAME_SCOPED_TRACK_LOG_AUTO_BLUEPRINT_NAME()

	UEdGraphPin* EventTagPin = GetEventTagPin();
	UEdGraphPin* EventStringPin = GetEventStringPin();

	if (!EventTagPin || !EventStringPin)
	{
		return;
	}

	if (UGameEventNodeUtils::IsStringEventId(GetEventIdTypePin()))
	{
		UGameEventNodeUtils::ClearPinValue(EventTagPin);
		EventStringPin->bHidden = false;
	}
	else
	{
		UGameEventNodeUtils::ClearPinValue(EventStringPin);
		EventTagPin->bHidden = false;
	}

	GetGraph()->NotifyNodeChanged(this);
}

FString UK2Node_GameEventBase::GetCurrentEventName() const
{
	return UGameEventNodeUtils::GetCurrentEventName(GetEventIdTypePin(), GetEventTagPin(), GetEventStringPin());
}

void UK2Node_GameEventBase::CreateEventIdentifierPins()
{
	GAME_SCOPED_TRACK_LOG_AUTO_BLUEPRINT_NAME()

	const UEdGraphSchema_K2* K2Schema = GetDefault<UEdGraphSchema_K2>();

	UEnum* EventIdTypeEnum = StaticEnum<EEventIdType>();
	UEdGraphPin* EventIdTypePin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Byte, EventIdTypeEnum, FGameEventBasePinNames::EventIdTypePinName);
	K2Schema->SetPinAutogeneratedDefaultValueBasedOnType(EventIdTypePin);

	CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Struct, FGameplayTag::StaticStruct(), FGameEventBasePinNames::EventTagPinName);

	CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_String, FGameEventBasePinNames::EventStringPinName);
}

UEdGraphPin* UK2Node_GameEventBase::GetEventIdTypePin() const
{
	UEdGraphPin* Pin = FindPin(FGameEventBasePinNames::EventIdTypePinName);
	check(Pin == nullptr || Pin->Direction == EGPD_Input);
	return Pin;
}

UEdGraphPin* UK2Node_GameEventBase::GetEventTagPin() const
{
	UEdGraphPin* Pin = FindPin(FGameEventBasePinNames::EventTagPinName);
	check(Pin == nullptr || Pin->Direction == EGPD_Input);
	return Pin;
}

UEdGraphPin* UK2Node_GameEventBase::GetEventStringPin() const
{
	UEdGraphPin* Pin = FindPin(FGameEventBasePinNames::EventStringPinName);
	check(Pin == nullptr || Pin->Direction == EGPD_Input);
	return Pin;
}

bool UK2Node_GameEventBase::CheckUpdatePinCondition(const UEdGraphPin* Pin) const
{
	if (!Pin)
	{
		return false;
	}
	return Pin->PinName == FGameEventBasePinNames::EventIdTypePinName;
}

void UK2Node_GameEventBase::ConnectEventNameWithTagConversion(FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph, UEdGraphPin* EventNameParam)
{
	GAME_SCOPED_TRACK_LOG_AUTO_BLUEPRINT_NAME()

	if (!EventNameParam)
	{
		return;
	}

	if (UGameEventNodeUtils::IsStringEventId(GetEventIdTypePin()))
	{
		CompilerContext.MovePinLinksToIntermediate(*GetEventStringPin(), *EventNameParam);
	}
	else
	{
		UK2Node_CallFunction* TagToEventNameNode = CompilerContext.SpawnIntermediateNode<UK2Node_CallFunction>(this, SourceGraph);
		TagToEventNameNode->FunctionReference.SetExternalMember(GET_FUNCTION_NAME_CHECKED(UGameEventNodeUtils, TagToEventName), UGameEventNodeUtils::StaticClass());
		TagToEventNameNode->AllocateDefaultPins();

		UEdGraphPin* TagInput = TagToEventNameNode->FindPinChecked(TEXT("InTag"));
		UEdGraphPin* StringOutput = TagToEventNameNode->FindPinChecked(UEdGraphSchema_K2::PN_ReturnValue);

		CompilerContext.MovePinLinksToIntermediate(*GetEventTagPin(), *TagInput);
		StringOutput->MakeLinkTo(EventNameParam);
	}
}

#undef LOCTEXT_NAMESPACE
